// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: employees.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignEmployeeLanguages = `-- name: AssignEmployeeLanguages :exec
INSERT INTO employees_languages (
    employee_id, language_id
) VALUES (
    $1, $2
)
`

type AssignEmployeeLanguagesParams struct {
	EmployeeID int32
	LanguageID int32
}

func (q *Queries) AssignEmployeeLanguages(ctx context.Context, arg AssignEmployeeLanguagesParams) error {
	_, err := q.db.Exec(ctx, assignEmployeeLanguages, arg.EmployeeID, arg.LanguageID)
	return err
}

const assignTeamCaptain = `-- name: AssignTeamCaptain :exec
INSERT INTO team_captains (
    employee_id, partner_id
) VALUES (
    $1, $2
)
`

type AssignTeamCaptainParams struct {
	EmployeeID int32
	PartnerID  int32
}

func (q *Queries) AssignTeamCaptain(ctx context.Context, arg AssignTeamCaptainParams) error {
	_, err := q.db.Exec(ctx, assignTeamCaptain, arg.EmployeeID, arg.PartnerID)
	return err
}

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (
    personio_id,
    first_name,
    last_name,
    email,
    picture_url,
    position,
    birthday,
    partner_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, uid, personio_id, first_name, last_name, email, picture_url, position, birthday, partner_id, created_at, updated_at
`

type CreateEmployeeParams struct {
	PersonioID int32
	FirstName  string
	LastName   pgtype.Text
	Email      string
	PictureUrl pgtype.Text
	Position   string
	Birthday   pgtype.Text
	PartnerID  int32
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.PersonioID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PictureUrl,
		arg.Position,
		arg.Birthday,
		arg.PartnerID,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.PersonioID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PictureUrl,
		&i.Position,
		&i.Birthday,
		&i.PartnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeByPersonioID = `-- name: GetEmployeeByPersonioID :one
SELECT id, uid, personio_id, first_name, last_name, email, picture_url, position, birthday, partner_id, created_at, updated_at
FROM employees
WHERE personio_id = $1 LIMIT 1
`

func (q *Queries) GetEmployeeByPersonioID(ctx context.Context, personioID int32) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByPersonioID, personioID)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.PersonioID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PictureUrl,
		&i.Position,
		&i.Birthday,
		&i.PartnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeByUID = `-- name: GetEmployeeByUID :one
SELECT 
e.id as employee_id,
e.uid,
e.first_name,
e.last_name,
e.email,
e.picture_url,
e.position,
e.birthday,
p.id as p_id,
p.name as p_name,
p.logo_url as p_logo_url,
s.name as s_name,
s.slack_id as s_id
FROM employees e
JOIN partners p on e.partner_id = p.id  
LEFT JOIN slack_info s on e.id = s.employee_id
WHERE uid = $1 LIMIT 1
`

type GetEmployeeByUIDRow struct {
	EmployeeID int32
	Uid        pgtype.UUID
	FirstName  string
	LastName   pgtype.Text
	Email      string
	PictureUrl pgtype.Text
	Position   string
	Birthday   pgtype.Text
	PID        int32
	PName      string
	PLogoUrl   string
	SName      pgtype.Text
	SID        pgtype.Text
}

func (q *Queries) GetEmployeeByUID(ctx context.Context, uid pgtype.UUID) (GetEmployeeByUIDRow, error) {
	row := q.db.QueryRow(ctx, getEmployeeByUID, uid)
	var i GetEmployeeByUIDRow
	err := row.Scan(
		&i.EmployeeID,
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PictureUrl,
		&i.Position,
		&i.Birthday,
		&i.PID,
		&i.PName,
		&i.PLogoUrl,
		&i.SName,
		&i.SID,
	)
	return i, err
}

const getEmployeeCount = `-- name: GetEmployeeCount :one
SELECT count(*)
FROM employees
`

func (q *Queries) GetEmployeeCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getEmployeeCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getEmployeeLanguages = `-- name: GetEmployeeLanguages :many
SELECT l.name
FROM employees e
JOIN employees_languages el ON e.id = el.employee_id
JOIN languages l ON el.language_id = l.id
WHERE e.id = $1
`

func (q *Queries) GetEmployeeLanguages(ctx context.Context, id int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getEmployeeLanguages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamCaptainIDByEmail = `-- name: GetTeamCaptainIDByEmail :one
SELECT 
e.id as employee_id
FROM employees e
JOIN partners p on e.partner_id = p.id  
WHERE e.email = $1
AND p.name = 'rindus'
LIMIT 1
`

func (q *Queries) GetTeamCaptainIDByEmail(ctx context.Context, email string) (int32, error) {
	row := q.db.QueryRow(ctx, getTeamCaptainIDByEmail, email)
	var employee_id int32
	err := row.Scan(&employee_id)
	return employee_id, err
}
