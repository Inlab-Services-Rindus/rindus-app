// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: languages.sql

package repository

import (
	"context"
)

const createLanguage = `-- name: CreateLanguage :one
INSERT INTO languages (
  id, name
) VALUES (
  $1, $2
)
RETURNING id, name, created_at, updated_at
`

type CreateLanguageParams struct {
	ID   int32
	Name string
}

func (q *Queries) CreateLanguage(ctx context.Context, arg CreateLanguageParams) (Language, error) {
	row := q.db.QueryRow(ctx, createLanguage, arg.ID, arg.Name)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLanguages = `-- name: ListLanguages :many
SELECT id, name FROM languages
ORDER BY name
`

type ListLanguagesRow struct {
	ID   int32
	Name string
}

func (q *Queries) ListLanguages(ctx context.Context) ([]ListLanguagesRow, error) {
	rows, err := q.db.Query(ctx, listLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLanguagesRow
	for rows.Next() {
		var i ListLanguagesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
