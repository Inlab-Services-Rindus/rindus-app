// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: partner.sql

package repository

import (
	"context"
)

const createPartner = `-- name: CreatePartner :one
INSERT INTO partners (
  name, logo_url, description 
) VALUES (
  $1, $2, $3
)
RETURNING id, name, logo_url, description, created_at, updated_at
`

type CreatePartnerParams struct {
	Name        string
	LogoUrl     string
	Description string
}

func (q *Queries) CreatePartner(ctx context.Context, arg CreatePartnerParams) (Partner, error) {
	row := q.db.QueryRow(ctx, createPartner, arg.Name, arg.LogoUrl, arg.Description)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LogoUrl,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPartner = `-- name: GetPartner :one
SELECT id, name, logo_url, description, created_at, updated_at FROM partners
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPartner(ctx context.Context, id int32) (Partner, error) {
	row := q.db.QueryRow(ctx, getPartner, id)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LogoUrl,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPartners = `-- name: ListPartners :many
SELECT id, name, logo_url, description, created_at, updated_at FROM partners
ORDER BY name
`

func (q *Queries) ListPartners(ctx context.Context) ([]Partner, error) {
	rows, err := q.db.Query(ctx, listPartners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Partner
	for rows.Next() {
		var i Partner
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LogoUrl,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
