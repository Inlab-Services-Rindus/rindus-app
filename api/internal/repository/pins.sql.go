// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pins.sql

package repository

import (
	"context"
)

const createPinCategory = `-- name: CreatePinCategory :one
INSERT INTO pins_category (
    name,
    created_at,
    updated_at
) VALUES (
    $1,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreatePinCategory(ctx context.Context, name string) (PinsCategory, error) {
	row := q.db.QueryRow(ctx, createPinCategory, name)
	var i PinsCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPinCategories = `-- name: GetPinCategories :many
SELECT id, name, created_at, updated_at FROM pins_category ORDER BY id
`

func (q *Queries) GetPinCategories(ctx context.Context) ([]PinsCategory, error) {
	rows, err := q.db.Query(ctx, getPinCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PinsCategory
	for rows.Next() {
		var i PinsCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
