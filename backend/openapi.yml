openapi: 3.1.0
info:
  title: Rindus backend API
  description: |
    This is the backend API for the Rindus app
  version: 0.0.1
servers:
  - url: http://localhost:3000
tags:
  - name: sessions
    description: Session management
  - name: users
    description: Opertations about users
  - name: partners
    description: Operations about partners
  - name: searches
    description: Search and suggestions engine
  - name: other
    description: Other useful operations
paths:
  /:
    get:
      tags:
        - other
      summary: Hello World
      operationId: helloWorld
      responses:
        200:
          description: Says hello
          content:
            text/plain:
              schema:
                const: "Hello World!"
  /login:
    post:
      tags:
        - sessions
      summary: Login given user
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        200:
          description: User was succesfully logged in
          $ref: "#/components/responses/LoggedInUser"
        401:
          description: Incorrect JWT was provided
          $ref: "#/components/responses/Unauthorized"
  /soft-login:
    post:
      tags:
        - sessions
      summary: Recovers users' session via cookie
      operationId: softLogin
      security:
        - cookieAuth: []
      responses:
        200:
          description: User session was found
          $ref: "#/components/responses/LoggedInUser"
        204:
          description: No session present in request
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
  /logout:
    post:
      tags:
        - sessions
      summary: Destroys user session
      operationId: logout
      security:
        - cookieAuth: []
      responses:
        200:
          description: User session was destroyed
          $ref: "#/components/responses/NoContent"
  /users:
    get:
      tags:
        - users
      summary: Returns pagination of all users
      operationId: listUsers
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: The requested page number
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          description: The requested page size
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Page of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersIndexPage"
        401:
          $ref: "#/components/responses/Unauthorized"
  /users/{userId}:
    get:
      tags:
        - users
      summary: Return given user
      operationId: showUser
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          description: The ID of the requested user
          required: true
          schema:
            type: string
      responses:
        200:
          description: Requested user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /partners:
    get:
      tags:
        - partners
      summary: Return all partners
      operationId: listPartners
      security:
        - cookieAuth: []
      responses:
        200:
          description: All partners
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnersIndex"
        401:
          $ref: "#/components/responses/Unauthorized"
  /partners/{partnerId}:
    get:
      tags:
        - partners
      summary: Return requested partner
      operationId: showPartner
      security:
        - cookieAuth: []
      parameters:
        - name: partnerId
          in: path
          description: The ID of the requested partner
          required: true
          schema:
            type: string
      responses:
        200:
          description: Requested partner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerProfile"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /partners/{partnerId}/members:
    get:
      tags:
        - partners
      summary: Return requested partner members
      operationId: showPartnerMembers
      security:
        - cookieAuth: []
      parameters:
        - name: partnerId
          in: path
          description: The ID of the requested partner
          required: true
          schema:
            type: string
      responses:
        200:
          description: Requested partner members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerMembers"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /search:
    get:
      tags:
        - searches
      summary: Search users by given criteria
      operationId: search
      security:
        - cookieAuth: []
      parameters:
        - name: keyword
          in: query
          description: Tag which is being searched
          required: false
          schema:
            enum:
              - language
              - position
        - name: id
          in: query
          description: ID of the tag being searched
          required: false
          schema:
            type: integer
        - name: query
          in: query
          description: "[Alternative] Text to search for in users name"
          required: false
          schema:
            type: string
      responses:
        200:
          description: Requested search result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResult"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/BadRequest"
  /suggestions:
    get:
      tags:
        - searches
      summary: Receive suggestions by given query
      operationId: suggestions
      security:
        - cookieAuth: []
      parameters:
        - name: query
          in: query
          description: Text to receive suggestions
          required: true
          schema:
            type: string
      responses:
        200:
          description: Search suggestions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestionsResult"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/BadRequest"
components:
  schemas:
    LoggedInUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        profilePictureUrl:
          type: string
          format: url
          examples:
            [
              "http://localhost:3000/avatars/v1/images/2217/large/70ea8090cf0bf9e0927815b4cbbe17162f4e0788.png",
            ]
    User:
      allOf:
        - $ref: "#/components/schemas/LoggedInUser"
        - type: object
          properties:
            firstName:
              type: string
              examples: ["John"]
            lastName:
              type: ["null", string]
              examples: ["Doe"]
            email:
              type: string
              format: email
              examples: ["john.doe@rindus.de"]
            isBirthday:
              type: boolean
              examples: ["false"]
    UsersIndexPage:
      type: object
      properties:
        data:
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: "#/components/schemas/IndexUser"
        totalPages:
          type: integer
          format: int64
          examples: [12]
    IndexUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            isCaptain:
              type: boolean
              examples: [true]
    UserProfile:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            position:
              type: string
              examples: ["API Engineer"]
            department:
              $ref: "#/components/schemas/Partner"
            slack:
              type: object
              properties:
                name:
                  type: string
                  examples: ["john.doe"]
                profileUrl:
                  type: string
                  format: url
                  examples: ["https://a1marketing.slack.com/team/A342AB33"]
            languages:
              type: array
              items:
                type: string
                examples: ["Spanish"]
            isCaptain:
              type: boolean
              examples: [true]
    PartnersIndex:
      type: array
      items:
        $ref: "#/components/schemas/IndexPartner"
    IndexPartner:
      $ref: "#/components/schemas/Partner"
    PartnerProfile:
      allOf:
        - $ref: "#/components/schemas/Partner"
        - properties:
            description:
              type: string
              examples: ["An incredible partner"]
    PartnerMembers:
      type: object
      properties:
        members:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/User"
              - properties:
                  position:
                    type: string
                    examples: ["Scrum Master"]
        captains:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/User"
              - properties:
                  position:
                    type: string
                    examples: ["Team Captain"]
    Partner:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        name:
          type: string
          format:
          examples: ["Douglas"]
        logoUrl:
          type: string
          format: uri
          examples: ["http://localhost:3000/images/partners/douglas.svg"]
    SearchResult:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/User"
          - type: object
            properties:
              isCaptain:
                type: boolean
                examples: [true]
    SuggestionsResult:
      type: object
      properties:
        languageSuggestions:
          type: array
          items:
            $ref: "#/components/schemas/TagSuggestion"
            minItems: 0
            maxItems: 2
        positionSuggestions:
          type: array
          items:
            $ref: "#/components/schemas/TagSuggestion"
            minItems: 0
            maxItems: 2
        userSuggestions:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/User"
              - type: object
                properties:
                  isCaptain:
                    type: boolean
                    examples: [true]
            minItems: 0
            maxItems: 5
    TagSuggestion:
      type: object
      properties:
        display:
          type: string
          examples: ["Scrum Master"]
        query:
          type: string
          examples: ["/search?type=position&query=Scrum+Master"]
    PositionSuggestion:
      type: object
      properties:
        type:
          const: position
        data:
          type: object
          properties:
            name:
              type: string
              examples: ["Scrum Master"]
  requestBodies:
    Login:
      description: Google provided user's JWT token
      content:
        application/json:
          schema:
            type: object
            properties:
              jwt:
                type: string
                format: jwt
  responses:
    Unauthorized:
      description: Not valid auth mechanism was provided
      content:
        text/plain:
          schema:
            const: "Unauthorized"
    NoContent:
      description: No content returned in body
      content:
        plain/text:
          schema:
            const: null
    NotFound:
      description: Resource not found
      content:
        text/plain:
          schema:
            const: "Not Found"
    BadRequest:
      description: Request malformed
      content:
        text/plain:
          schema:
            const: "Bad Request"
    LoggedInUser:
      description: Retrieved user session info
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoggedInUser"
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: connect.sid
      in: cookie
